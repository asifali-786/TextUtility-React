{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","console","log","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","join","length","Alert","alert","role","word","lower","charAt","slice","capatilized","message","defaultProps","aboutText","App","setAlert","setTimeout","setMode","body","setInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ce0f7fac.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"/\">{props.aboutText}</a>\r\n                        </li> */}\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button cla\r\n                        ssName=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div>\r\n                    {/* <div className={`form-check form-switch text-${props.mode==='pink'?'purple':'pink'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable PinkPurpleMode</label>\r\n                    </div> */}\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n  };","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"Uppercase was clicked: \" +  text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Uppercase has been enabled\",\"success\")\r\n    }\r\n\r\n    const handleLoClick = ()=>{ \r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Lowercase has been enabled\",\"success\")\r\n    }\r\n\r\n    const handleClearClick = ()=>{ \r\n        let newText = '';\r\n        setText(newText)\r\n        props.showAlert(\"Clear button has been enabled\",\"success\")\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"On change\");\r\n        setText(event.target.value) \r\n    }\r\n\r\n    // Credits: A\r\n    const handleCopy = () => {\r\n        console.log(\"I am copy\");\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        text.setSelectionRange(0, 9999);\r\n        navigator.clipboard.writeText(text.value);\r\n                props.showAlert(\"Text copied \",\"success\")\r\n    }\r\n\r\n    // Credits: Coding Wala\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Removed extra spaces\",\"success\")\r\n\r\n    }\r\n\r\n    const [text, setText] = useState(''); \r\n    // text = \"new text\"; // Wrong way to change the state\r\n    // setText(\"new text\"); // Correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}> \r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\"> \r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 *  text.split(\" \").length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capatilized = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n\r\n    }\r\n\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n      <strong>{capatilized(props.alert.type)}</strong>: {props.alert.message}\r\n      <button\r\n        type=\"button\"\r\n        className=\"btn-close\"\r\n        data-bs-dismiss=\"alert\"\r\n        aria-label=\"Close\"\r\n      ></button>\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport Alert1 from \"./components/Alert\";\n// import About from \"./components/About\";\nimport React, { useState } from \"react\";\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [Alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  const [mode, setMode] = useState(\"light\"); // Whether dark mode is enabled or not\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark mode\";\n\n      setInterval(() => {\n        document.title = \"TextUtils is Amazing mode\";\n      }, 800);\n      setInterval(() => {\n        document.title = \"Install TextUtils Now\";\n      }, 700);\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Light mode\";\n\n      // setInterval(() => {\n      //   document.title = \"Dark TextUtils is Amazing mode\"\n      // }, 600);\n      // setInterval(() => {\n      //   document.title = \"Install TextUtils Now in Dark Mode\"\n      // }, 500);\n    }\n  };\n\n  return (\n    // <Router>\n    <>\n      {/* <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" /> */}\n      {/* <Navbar/> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert1 alert={Alert}></Alert1>\n\n      {/* <Switch>\n          <Route path=\"/about\">\n            <About/>\n          </Route>\n          \n           <Route path=\"/\">  */}\n      <div className=\"container my-3\">\n        <TextForm\n          showAlert={showAlert}\n          heading=\"Enter the text to analyze below\"\n          mode={mode}\n        />\n      </div>\n    </>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}